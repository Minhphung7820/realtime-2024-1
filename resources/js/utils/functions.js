import CryptoJS from "crypto-js";
export function encodeQueryParams(params) {
    return btoa(JSON.stringify(params));
}

export function decodeQueryParams(encodedParams) {
    try {
        return JSON.parse(atob(encodedParams));
    } catch (e) {
        console.error("Invalid query parameter format:", e);
        return null;
    }
}

export function formatTimeDifference(lastActive) {
    const now = new Date();
    const lastActiveDate = new Date(lastActive);
    const diffSeconds = Math.floor((now - lastActiveDate) / 1000); // Ch√™nh l·ªách gi√¢y

    if (diffSeconds < 60) {
        return 'V·ª´a truy c·∫≠p';
    } else if (diffSeconds < 3600) {
        const minutes = Math.floor(diffSeconds / 60);
        return `${minutes} ph√∫t tr∆∞·ªõc`;
    } else if (diffSeconds < 86400) {
        const hours = Math.floor(diffSeconds / 3600);
        return `${hours} gi·ªù tr∆∞·ªõc`;
    } else if (diffSeconds < 604800) {
        const days = Math.floor(diffSeconds / 86400);
        return `${days} ng√†y tr∆∞·ªõc`;
    } else if (diffSeconds < 2592000) {
        const weeks = Math.floor(diffSeconds / 604800);
        return `${weeks} tu·∫ßn tr∆∞·ªõc`;
    } else {
        const months = Math.floor(diffSeconds / 2592000);
        return `${months} th√°ng tr∆∞·ªõc`;
    }
}

export function debounce(func, wait) {
    let timeout;
    return function (...args) {
        clearTimeout(timeout);
        timeout = setTimeout(() => func.apply(this, args), wait);
    };
}

export function getFlagEmoji(countryCode) {
    // Validate the input to be exactly two characters long and all alphabetic
    if (!countryCode || countryCode.length !== 2 || !/^[a-zA-Z]+$/.test(countryCode)) {
        return 'üè≥Ô∏è'; // White Flag Emoji for unknown or invalid country codes
    }

    // Convert the country code to uppercase to match the regional indicator symbols
    const code = countryCode.toUpperCase();

    // Calculate the offset for the regional indicator symbols
    const offset = 127397;

    // Convert each letter in the country code to its corresponding regional indicator symbol
    const flag = Array.from(code).map(letter => String.fromCodePoint(letter.charCodeAt(0) + offset)).join('');

    return flag;
}
// H√†m t·∫°o c·∫∑p kh√≥a public/private
export async function generateKeyPair() {
    const keyPair = await crypto.subtle.generateKey({
        name: "RSA-OAEP",
        modulusLength: 2048, // ƒê·ªô d√†i kh√≥a (2048 bit - ti√™u chu·∫©n)
        publicExponent: new Uint8Array([1, 0, 1]), // 65537
        hash: { name: "SHA-256" }, // Thu·∫≠t to√°n bƒÉm
    },
        true, // Cho ph√©p export key
        ["encrypt", "decrypt"] // Public key d√πng ƒë·ªÉ m√£ h√≥a, private key d√πng ƒë·ªÉ gi·∫£i m√£
    );

    // Xu·∫•t public key ·ªü ƒë·ªãnh d·∫°ng 'spki' (SubjectPublicKeyInfo)
    const publicKey = await crypto.subtle.exportKey("spki", keyPair.publicKey);

    // Xu·∫•t private key ·ªü ƒë·ªãnh d·∫°ng 'pkcs8' (Private Key Cryptographic Standard #8)
    const privateKey = await crypto.subtle.exportKey("pkcs8", keyPair.privateKey);

    // Encode Base64 ƒë·ªÉ l∆∞u tr·ªØ d∆∞·ªõi d·∫°ng chu·ªói
    return {
        publicKey: btoa(String.fromCharCode(...new Uint8Array(publicKey))),
        privateKey: btoa(String.fromCharCode(...new Uint8Array(privateKey))),
    };
}

export function generateDeviceId() {
    const deviceInfo = `${navigator.userAgent}`;
    return deviceInfo; // Encode Base64 ƒë·ªÉ l∆∞u tr·ªØ
}

/**
 * M√£ h√≥a private key b·∫±ng Recovery Key
 * @param {string} privateKey - Private key g·ªëc (d·∫°ng Base64 ho·∫∑c chu·ªói)
 * @param {string} recoveryKey - Recovery Key c·ªßa ng∆∞·ªùi d√πng
 * @returns {string} - Private key ƒë√£ m√£ h√≥a b·∫±ng Recovery Key
 */
export function encryptPrivateKeyWithRecoveryKey(privateKey, recoveryKey) {
    // M√£ h√≥a private key b·∫±ng AES v·ªõi Recovery Key
    const encryptedPrivateKey = CryptoJS.AES.encrypt(privateKey, recoveryKey).toString();
    return encryptedPrivateKey;
}

/**
 * H√†m m√£ h√≥a privateKey b·∫±ng m√£ PIN
 * @param {string} privateKey - Private key d∆∞·ªõi d·∫°ng chu·ªói Base64
 * @param {string} pin - M√£ PIN c·ªßa ng∆∞·ªùi d√πng
 * @returns {string} - Private key ƒë√£ m√£ h√≥a b·∫±ng AES
 */
export function encryptPrivateKeyWithPin(privateKey, pin) {
    // S·ª≠ d·ª•ng AES ƒë·ªÉ m√£ h√≥a privateKey b·∫±ng m√£ PIN
    const encryptedPrivateKey = CryptoJS.AES.encrypt(privateKey, pin).toString();
    return encryptedPrivateKey;
}

/**
 * Gi·∫£i m√£ private key b·∫±ng m√£ PIN
 * @param {string} encryptedPrivateKey - Private key ƒë√£ m√£ h√≥a b·∫±ng m√£ PIN
 * @param {string} pin - M√£ PIN c·ªßa ng∆∞·ªùi d√πng
 * @returns {string|null} - Private key nguy√™n b·∫£n ho·∫∑c null n·∫øu m√£ PIN sai
 */
export function decryptPrivateKeyWithPin(encryptedPrivateKey, pin) {
    try {
        // Gi·∫£i m√£ private key
        const bytes = CryptoJS.AES.decrypt(encryptedPrivateKey, pin);
        const privateKey = bytes.toString(CryptoJS.enc.Utf8);

        // Ki·ªÉm tra xem k·∫øt qu·∫£ c√≥ h·ª£p l·ªá hay kh√¥ng (kh√¥ng ph·∫£i chu·ªói r·ªóng)
        if (!privateKey) {
            throw new Error("Gi·∫£i m√£ th·∫•t b·∫°i: M√£ PIN kh√¥ng h·ª£p l·ªá ho·∫∑c d·ªØ li·ªáu b·ªã h·ªèng.");
        }

        return privateKey;
    } catch (error) {
        console.error("Gi·∫£i m√£ th·∫•t b·∫°i:", error.message);
        return null; // Tr·∫£ v·ªÅ null n·∫øu gi·∫£i m√£ th·∫•t b·∫°i
    }
}

/**
 * Gi·∫£i m√£ private key b·∫±ng Recovery Key
 * @param {string} encryptedPrivateKey - Private key ƒë√£ m√£ h√≥a b·∫±ng Recovery Key
 * @param {string} recoveryKey - Recovery Key c·ªßa ng∆∞·ªùi d√πng
 * @returns {string|null} - Private key nguy√™n b·∫£n ho·∫∑c null n·∫øu Recovery Key sai
 */
export function decryptPrivateKeyWithRecoveryKey(encryptedPrivateKey, recoveryKey) {
    try {
        // Gi·∫£i m√£ private key
        const bytes = CryptoJS.AES.decrypt(encryptedPrivateKey, recoveryKey);
        const privateKey = bytes.toString(CryptoJS.enc.Utf8);

        // Ki·ªÉm tra xem k·∫øt qu·∫£ c√≥ h·ª£p l·ªá hay kh√¥ng (kh√¥ng ph·∫£i chu·ªói r·ªóng)
        if (!privateKey) {
            throw new Error("Gi·∫£i m√£ th·∫•t b·∫°i: Recovery Key kh√¥ng h·ª£p l·ªá ho·∫∑c d·ªØ li·ªáu b·ªã h·ªèng.");
        }

        return privateKey;
    } catch (error) {
        console.error("Gi·∫£i m√£ th·∫•t b·∫°i:", error.message);
        return null; // Tr·∫£ v·ªÅ null n·∫øu gi·∫£i m√£ th·∫•t b·∫°i
    }
}

// H√†m importPublicKey
export async function importPublicKey(base64Key) {
    const pemKey = `-----BEGIN PUBLIC KEY-----\n${base64Key.match(/.{1,64}/g).join("\n")}\n-----END PUBLIC KEY-----`;
    const cleanBase64 = pemKey
        .replace(/-----BEGIN PUBLIC KEY-----/, "")
        .replace(/-----END PUBLIC KEY-----/, "")
        .replace(/\n/g, "");
    const binaryDer = Uint8Array.from(atob(cleanBase64), (char) => char.charCodeAt(0));
    return await crypto.subtle.importKey(
        "spki",
        binaryDer, {
        name: "RSA-OAEP",
        hash: { name: "SHA-256" },
    },
        true, ["encrypt"]
    );
}

export async function importPrivateKey(base64Key) {
    const pemKey = `-----BEGIN PRIVATE KEY-----\n${base64Key.match(/.{1,64}/g).join("\n")}\n-----END PRIVATE KEY-----`;
    const cleanBase64 = pemKey
        .replace(/-----BEGIN PRIVATE KEY-----/, "")
        .replace(/-----END PRIVATE KEY-----/, "")
        .replace(/\n/g, "");
    const binaryDer = Uint8Array.from(atob(cleanBase64), (char) => char.charCodeAt(0));
    return await crypto.subtle.importKey(
        "pkcs8",
        binaryDer, {
        name: "RSA-OAEP",
        hash: { name: "SHA-256" },
    },
        true, ["decrypt"]
    );
}
/**
 * T·∫°o m√£ Master Key ng·∫´u nhi√™n
 * @returns {string} - Master Key (d·∫°ng chu·ªói Base64)
 */
export function generateMasterKey() {
    // T·∫°o Master Key ng·∫´u nhi√™n (256-bit)
    const randomBytes = crypto.getRandomValues(new Uint8Array(32)); // 32 bytes = 256 bits
    return btoa(String.fromCharCode(...randomBytes)); // Chuy·ªÉn th√†nh Base64 ƒë·ªÉ l∆∞u tr·ªØ
}

/**
 * M√£ h√≥a Private Key b·∫±ng Master Key
 * @param {string} privateKey - Private Key (d·∫°ng Base64)
 * @param {string} masterKey - Master Key (d·∫°ng Base64)
 * @returns {string} - Private Key ƒë√£ m√£ h√≥a (d·∫°ng Base64)
 */
export function encryptPrivateKeyWithMasterKey(privateKey, masterKey) {
    // M√£ h√≥a Private Key b·∫±ng AES v·ªõi Master Key
    const encryptedPrivateKey = CryptoJS.AES.encrypt(privateKey, masterKey).toString();
    return encryptedPrivateKey; // Tr·∫£ v·ªÅ chu·ªói Base64
}

/**
 * Gi·∫£i m√£ Private Key b·∫±ng Master Key
 * @param {string} encryptedPrivateKey - Private Key ƒë√£ m√£ h√≥a (d·∫°ng Base64)
 * @param {string} masterKey - Master Key (d·∫°ng Base64)
 * @returns {string|null} - Private Key g·ªëc ho·∫∑c null n·∫øu gi·∫£i m√£ th·∫•t b·∫°i
 */
export function decryptPrivateKeyWithMasterKey(encryptedPrivateKey, masterKey) {
    try {
        // Gi·∫£i m√£ Private Key b·∫±ng AES v·ªõi Master Key
        const bytes = CryptoJS.AES.decrypt(encryptedPrivateKey, masterKey);
        const privateKey = bytes.toString(CryptoJS.enc.Utf8);

        // Ki·ªÉm tra k·∫øt qu·∫£
        if (!privateKey) {
            throw new Error("Gi·∫£i m√£ th·∫•t b·∫°i: Master Key kh√¥ng h·ª£p l·ªá ho·∫∑c d·ªØ li·ªáu b·ªã h·ªèng.");
        }

        return privateKey; // Tr·∫£ v·ªÅ Private Key g·ªëc
    } catch (error) {
        console.error("Gi·∫£i m√£ th·∫•t b·∫°i:", error.message);
        return null; // Tr·∫£ v·ªÅ null n·∫øu gi·∫£i m√£ th·∫•t b·∫°i
    }
}

/**
 * M√£ h√≥a Master Key b·∫±ng m√£ PIN
 * @param {string} masterKey - Master Key (d·∫°ng Base64)
 * @param {string} pin - M√£ PIN c·ªßa ng∆∞·ªùi d√πng
 * @returns {string} - Master Key ƒë√£ m√£ h√≥a (d·∫°ng Base64)
 */
export function encryptMasterKeyWithPin(masterKey, pin) {
    // S·ª≠ d·ª•ng AES ƒë·ªÉ m√£ h√≥a Master Key b·∫±ng m√£ PIN
    const encryptedMasterKey = CryptoJS.AES.encrypt(masterKey, pin).toString();
    return encryptedMasterKey;
}

/**
 * Gi·∫£i m√£ Master Key b·∫±ng m√£ PIN
 * @param {string} encryptedMasterKey - Master Key ƒë√£ m√£ h√≥a (d·∫°ng Base64)
 * @param {string} pin - M√£ PIN c·ªßa ng∆∞·ªùi d√πng
 * @returns {string|null} - Master Key g·ªëc ho·∫∑c null n·∫øu gi·∫£i m√£ th·∫•t b·∫°i
 */
export function decryptMasterKeyWithPin(encryptedMasterKey, pin) {
    try {
        // Gi·∫£i m√£ Master Key b·∫±ng AES v·ªõi m√£ PIN
        const bytes = CryptoJS.AES.decrypt(encryptedMasterKey, pin);
        const masterKey = bytes.toString(CryptoJS.enc.Utf8);

        // Ki·ªÉm tra k·∫øt qu·∫£
        if (!masterKey) {
            throw new Error("Gi·∫£i m√£ th·∫•t b·∫°i: M√£ PIN kh√¥ng h·ª£p l·ªá ho·∫∑c d·ªØ li·ªáu b·ªã h·ªèng.");
        }

        return masterKey; // Tr·∫£ v·ªÅ Master Key g·ªëc
    } catch (error) {
        console.error("Gi·∫£i m√£ th·∫•t b·∫°i:", error.message);
        return null; // Tr·∫£ v·ªÅ null n·∫øu gi·∫£i m√£ th·∫•t b·∫°i
    }
}

/**
 * T·∫°o Recovery Key ng·∫´u nhi√™n
 * @returns {string} - Recovery Key (d·∫°ng chu·ªói Base64)
 */
export function generateRecoveryKey() {
    // T·∫°o Recovery Key ng·∫´u nhi√™n (256-bit)
    const randomBytes = crypto.getRandomValues(new Uint8Array(32)); // 32 bytes = 256 bits
    return btoa(String.fromCharCode(...randomBytes)); // Chuy·ªÉn th√†nh Base64 ƒë·ªÉ l∆∞u tr·ªØ
}

/**
 * M√£ h√≥a Master Key b·∫±ng Recovery Key
 * @param {string} masterKey - Master Key (d·∫°ng Base64)
 * @param {string} recoveryKey - Recovery Key (d·∫°ng Base64)
 * @returns {string} - Master Key ƒë√£ m√£ h√≥a (d·∫°ng Base64)
 */
export function encryptMasterKeyWithRecovery(masterKey, recoveryKey) {
    // S·ª≠ d·ª•ng AES ƒë·ªÉ m√£ h√≥a Master Key b·∫±ng Recovery Key
    const encryptedMasterKey = CryptoJS.AES.encrypt(masterKey, recoveryKey).toString();
    return encryptedMasterKey;
}

/**
 * Gi·∫£i m√£ Master Key b·∫±ng Recovery Key
 * @param {string} encryptedMasterKey - Master Key ƒë√£ m√£ h√≥a (d·∫°ng Base64)
 * @param {string} recoveryKey - Recovery Key (d·∫°ng Base64)
 * @returns {string|null} - Master Key g·ªëc ho·∫∑c null n·∫øu gi·∫£i m√£ th·∫•t b·∫°i
 */
export function decryptMasterKeyWithRecovery(encryptedMasterKey, recoveryKey) {
    try {
        // Gi·∫£i m√£ Master Key b·∫±ng AES v·ªõi Recovery Key
        const bytes = CryptoJS.AES.decrypt(encryptedMasterKey, recoveryKey);
        const masterKey = bytes.toString(CryptoJS.enc.Utf8);

        // Ki·ªÉm tra k·∫øt qu·∫£
        if (!masterKey) {
            throw new Error("Gi·∫£i m√£ th·∫•t b·∫°i: Recovery Key kh√¥ng h·ª£p l·ªá ho·∫∑c d·ªØ li·ªáu b·ªã h·ªèng.");
        }

        return masterKey; // Tr·∫£ v·ªÅ Master Key g·ªëc
    } catch (error) {
        console.error("Gi·∫£i m√£ th·∫•t b·∫°i:", error.message);
        return null; // Tr·∫£ v·ªÅ null n·∫øu gi·∫£i m√£ th·∫•t b·∫°i
    }
}

export async function checkKeyPair(privateKeyPem, publicKeyPem) {
    try {
        // Parse Public Key
        const publicKey = await window.crypto.subtle.importKey(
            "spki",
            convertPemToBinary(publicKeyPem), { name: "RSA-PSS", hash: { name: "SHA-256" } },
            true, ["verify"]
        );

        // Parse Private Key
        const privateKey = await window.crypto.subtle.importKey(
            "pkcs8",
            convertPemToBinary(privateKeyPem), { name: "RSA-PSS", hash: { name: "SHA-256" } },
            true, ["sign"]
        );

        // Sign a message using the private key
        const data = new TextEncoder().encode("Test Message");
        const signature = await window.crypto.subtle.sign({ name: "RSA-PSS", saltLength: 32 },
            privateKey,
            data
        );

        // Verify the signature using the public key
        const isVerified = await window.crypto.subtle.verify({ name: "RSA-PSS", saltLength: 32 },
            publicKey,
            signature,
            data
        );

        return isVerified;
    } catch (error) {
        console.error("Error checking key pair:", error);
        return false;
    }
}

// Helper function to convert PEM to binary
function convertPemToBinary(pem) {
    const base64 = pem
        .replace(/-----BEGIN [^-]+-----/, "")
        .replace(/-----END [^-]+-----/, "")
        .replace(/\s+/g, "");
    return Uint8Array.from(atob(base64), (c) => c.charCodeAt(0));
}

export async function encryptMessageWithPublicKey(message, publicKey) {
    const aesKey = crypto.getRandomValues(new Uint8Array(32)); // T·∫°o AES Key
    const iv = crypto.getRandomValues(new Uint8Array(12)); // T·∫°o Initialization Vector (IV)
    const aesCipher = await crypto.subtle.encrypt({
        name: "AES-GCM",
        iv,
    },
        await crypto.subtle.importKey("raw", aesKey, "AES-GCM", false, ["encrypt"]),
        new TextEncoder().encode(message)
    );
    const encryptedAesKey = await crypto.subtle.encrypt({
        name: "RSA-OAEP",
    },
        publicKey,
        aesKey
    );
    return {
        encryptedMessage: btoa(String.fromCharCode(...new Uint8Array(aesCipher))),
        encryptedKey: btoa(String.fromCharCode(...new Uint8Array(encryptedAesKey))),
        iv: btoa(String.fromCharCode(...iv)),
    };
}

export async function decryptMessageWithPrivateKey(encryptedData, privateKey) {
    const { encryptedMessage, encryptedKey, iv } = encryptedData;

    const aesKey = await crypto.subtle.decrypt({
        name: "RSA-OAEP",
    },
        privateKey,
        new Uint8Array(atob(encryptedKey).split("").map((c) => c.charCodeAt(0)))
    );

    const decryptedMessage = await crypto.subtle.decrypt({
        name: "AES-GCM",
        iv: new Uint8Array(atob(iv).split("").map((c) => c.charCodeAt(0))),
    },
        await crypto.subtle.importKey("raw", aesKey, "AES-GCM", false, ["decrypt"]),
        new Uint8Array(atob(encryptedMessage).split("").map((c) => c.charCodeAt(0)))
    );

    return new TextDecoder().decode(decryptedMessage);
}

export async function encryptMessageWithGroupKey(message, groupKey) {
    // Decode Group Key t·ª´ Base64
    const rawGroupKey = new Uint8Array(atob(groupKey).split("").map(c => c.charCodeAt(0)));

    // T·∫°o Initialization Vector (IV) ng·∫´u nhi√™n
    const iv = crypto.getRandomValues(new Uint8Array(12));

    // M√£ h√≥a tin nh·∫Øn b·∫±ng AES-GCM
    const encryptedMessage = await crypto.subtle.encrypt({
        name: "AES-GCM",
        iv,
    },
        await crypto.subtle.importKey("raw", rawGroupKey, "AES-GCM", false, ["encrypt"]),
        new TextEncoder().encode(message)
    );

    return {
        encryptedMessage: btoa(String.fromCharCode(...new Uint8Array(encryptedMessage))), // Base64
        iv: btoa(String.fromCharCode(...iv)), // Base64
    };
}

export async function decryptMessageWithGroupKey(encryptedData, groupKey) {
    const { encryptedMessage, iv } = encryptedData;

    // Decode Group Key v√† IV t·ª´ Base64
    const rawGroupKey = new Uint8Array(atob(groupKey).split("").map(c => c.charCodeAt(0)));
    const rawIv = new Uint8Array(atob(iv).split("").map(c => c.charCodeAt(0)));

    // Gi·∫£i m√£ tin nh·∫Øn b·∫±ng AES-GCM
    const decryptedMessage = await crypto.subtle.decrypt({
        name: "AES-GCM",
        iv: rawIv,
    },
        await crypto.subtle.importKey("raw", rawGroupKey, "AES-GCM", false, ["decrypt"]),
        new Uint8Array(atob(encryptedMessage).split("").map(c => c.charCodeAt(0)))
    );

    return new TextDecoder().decode(decryptedMessage);
}

export async function generateGroupKey() {
    const key = await crypto.subtle.generateKey({
        name: "AES-GCM",
        length: 256,
    },
        true, ["encrypt", "decrypt"]
    );
    return key;
}

export async function encryptFileWithGroupKey(groupKey, fileData, fileName = null) {
    const iv = crypto.getRandomValues(new Uint8Array(12)); // Random IV

    // K·∫øt h·ª£p t√™n file v√† n·ªôi dung file th√†nh m·ªôt JSON string
    const fileObject = {
        name: fileName, // T√™n file
        content: Array.from(new Uint8Array(fileData)), // Chuy·ªÉn n·ªôi dung file th√†nh m·∫£ng s·ªë
    };
    const fileString = JSON.stringify(fileObject);

    // M√£ h√≥a d·ªØ li·ªáu file (t√™n + n·ªôi dung)
    const encryptedData = await crypto.subtle.encrypt({
        name: "AES-GCM",
        iv,
    },
        groupKey,
        new TextEncoder().encode(fileString) // Convert string to ArrayBuffer
    );

    const encryptedUint8Array = new Uint8Array(encryptedData);
    const combinedData = new Blob([iv, encryptedUint8Array], { type: "application/octet-stream" });

    return combinedData; // Tr·∫£ v·ªÅ Blob ch·ª©a IV v√† d·ªØ li·ªáu m√£ h√≥a
}

export async function decryptFileWithGroupKey(encryptedBlob, groupKey) {
    try {
        const arrayBuffer = await encryptedBlob.arrayBuffer();

        // T√°ch IV v√† d·ªØ li·ªáu m√£ h√≥a
        const iv = new Uint8Array(arrayBuffer.slice(0, 12));
        const encryptedData = arrayBuffer.slice(12);

        // Gi·∫£i m√£ d·ªØ li·ªáu
        const decryptedData = await crypto.subtle.decrypt({
            name: "AES-GCM",
            iv,
        }, groupKey, encryptedData);

        // Convert ArrayBuffer th√†nh string JSON
        const fileString = new TextDecoder().decode(decryptedData);

        // Parse JSON ƒë·ªÉ l·∫•y t√™n v√† n·ªôi dung file
        const fileObject = JSON.parse(fileString);

        const fileName = fileObject.name; // L·∫•y t√™n file
        const fileContent = new Uint8Array(fileObject.content); // L·∫•y n·ªôi dung file

        return { fileName, fileContent }; // Tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng ch·ª©a t√™n v√† n·ªôi dung file
    } catch (error) {
        throw error; // B√°o l·ªói n·∫øu c√≥ v·∫•n ƒë·ªÅ
    }
}

export async function encryptGroupKeyWithPublicKey(groupKey, publicKey) {
    const exportedKey = await crypto.subtle.exportKey("raw", groupKey);
    const encryptedGroupKey = await crypto.subtle.encrypt({
        name: "RSA-OAEP",
    },
        publicKey,
        exportedKey
    );
    return encryptedGroupKey;
}

export async function decryptGroupKeyWithPrivateKey(encryptedGroupKey, privateKey) {
    const decryptedGroupKeyRaw = await crypto.subtle.decrypt({
        name: "RSA-OAEP",
    },
        privateKey,
        encryptedGroupKey
    );
    const groupKey = await crypto.subtle.importKey(
        "raw",
        decryptedGroupKeyRaw, {
        name: "AES-GCM",
    },
        true, ["encrypt", "decrypt"]
    );
    return groupKey;
}

export async function arrayBufferToBase64(buffer) {
    let binary = '';
    const bytes = new Uint8Array(buffer);
    const len = bytes.byteLength;
    for (let i = 0; i < len; i++) {
        binary += String.fromCharCode(bytes[i]);
    }
    return btoa(binary); // Encode to Base64
}

export async function base64ToArrayBuffer(base64) {
    const binaryString = atob(base64); // Decode Base64
    const len = binaryString.length;
    const bytes = new Uint8Array(len);
    for (let i = 0; i < len; i++) {
        bytes[i] = binaryString.charCodeAt(i);
    }
    return bytes.buffer; // Tr·∫£ v·ªÅ ArrayBuffer
}

export async function testEncryptionDecryption() {
    try {
        // T·∫°o groupKey
        const groupKey = await crypto.subtle.generateKey({ name: "AES-GCM", length: 256 },
            true, ["encrypt", "decrypt"]
        );

        // D·ªØ li·ªáu ƒë·∫ßu v√†o (ArrayBuffer)
        const originalData = new TextEncoder().encode("This is a test file").buffer;

        // M√£ h√≥a
        const encryptedBlob = await encryptFileWithGroupKey(groupKey, originalData);
        console.log("Encrypted Blob:", encryptedBlob);

        // Gi·∫£i m√£
        const decryptedData = await decryptFileWithGroupKey(encryptedBlob, groupKey);
        console.log("Decrypted Data:", new TextDecoder().decode(decryptedData));

        // So s√°nh d·ªØ li·ªáu g·ªëc v√† d·ªØ li·ªáu gi·∫£i m√£
        if (new TextDecoder().decode(decryptedData) === "This is a test file") {
            console.log("Encryption and decryption work correctly!");
        } else {
            console.error("Decryption result does not match the original data!");
        }
    } catch (error) {
        console.error("Error in encryption/decryption:", error);
    }
}

export async function compressImage(file, quality = 0.7, maxWidth = 1024) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = function (event) {
            const img = new Image();
            img.src = event.target.result;

            img.onload = function () {
                const canvas = document.createElement("canvas");
                const ctx = canvas.getContext("2d");

                const scaleSize = maxWidth / img.width;
                canvas.width = maxWidth;
                canvas.height = img.height * scaleSize;

                ctx.drawImage(img, 0, 0, canvas.width, canvas.height);

                canvas.toBlob(
                    (blob) => {
                        // Chuy·ªÉn Blob th√†nh File
                        const compressedFile = new File([blob], file.name, {
                            type: "image/jpeg",
                            lastModified: Date.now(),
                        });

                        resolve(compressedFile); // Tr·∫£ v·ªÅ file n√©n
                    },
                    "image/jpeg",
                    quality
                );
            };

            img.onerror = function (error) {
                reject(error);
            };
        };

        reader.onerror = function (error) {
            reject(error);
        };

        reader.readAsDataURL(file);
    });
}

export async function compressVideo(file, bitrate = "500k") {
    // Kh·ªüi t·∫°o FFmpeg t·ª´ CDN
    const ffmpeg = window.FFmpeg.createFFmpeg({ log: true });
    const fetchFile = window.FFmpeg.fetchFile; // L·∫•y fetchFile t·ª´ FFmpeg CDN

    await ffmpeg.load();

    const inputName = "input.mp4";
    const outputName = "output.mp4";

    // Ghi file ƒë·∫ßu v√†o v√†o b·ªô nh·ªõ ·∫£o c·ªßa ffmpeg
    ffmpeg.FS("writeFile", inputName, await fetchFile(file));

    // Ch·∫°y l·ªánh ffmpeg ƒë·ªÉ n√©n video
    await ffmpeg.run(
        "-i", inputName, // File ƒë·∫ßu v√†o
        "-b:v", bitrate, // Gi·∫£m bitrate ƒë·ªÉ gi·∫£m dung l∆∞·ª£ng
        "-preset", "fast", // T·ªëi ∆∞u t·ªëc ƒë·ªô x·ª≠ l√Ω
        outputName // File ƒë·∫ßu ra
    );

    // L·∫•y d·ªØ li·ªáu video ƒë√£ n√©n
    const compressedData = ffmpeg.FS("readFile", outputName);
    const compressedBlob = new Blob([compressedData.buffer], { type: "video/mp4" });

    // T·∫°o File t·ª´ Blob
    const compressedFile = new File([compressedBlob], file.name, { type: "video/mp4" });

    return compressedFile; // Tr·∫£ v·ªÅ File n√©n
}

export async function compressFile(file) {
    const mimeType = file.type;

    if (mimeType.startsWith("image/")) {
        return await compressImage(file, 0.5); // N√©n ·∫£nh v·ªõi ch·∫•t l∆∞·ª£ng 70%
    } else if (mimeType.startsWith("video/")) {
        return await compressVideo(file, "500k"); // N√©n video v·ªõi bitrate 500k
    } else {
        throw new Error("File kh√¥ng ph·∫£i l√† ·∫£nh ho·∫∑c video");
    }
}